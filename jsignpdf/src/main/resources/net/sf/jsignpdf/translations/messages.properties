certificationLevel.formFill=Form filling allowed
certificationLevel.formFillAnnot=Form filling and annotations allowed
certificationLevel.noChanges=No changes allowed
certificationLevel.notCertified=Not certified
console.certificateChainEmpty=No private key was found. Check the keystore settings (keystore type, filepath, password, key alias).
console.certificateExpired=Certificate {0} expired already.
console.certificateNotForSignature=The \"{0}\" certificate is not intended to be signed digitally.
console.certificateNotYetValid=Certificate {0} is not yet valid.
console.closeStream=Closing result PDF stream
console.configureVisible=Configuring visible signature
console.createImage=Creating image {0}
console.createOutPdf=Creating output PDF file: {0}
console.createPdfReader=Opening input PDF file: {0}
console.createSignature=Creating signature
console.creatingTsaClient=Creating TSA client.
console.criticalExtensionNotSupported=The {0} certificate contains a critical (OID "{1}") extension not recognized by JSignPDF — skipping.
console.crlinfo.alreadyLoaded=Downloaded CRL is already present. Skipping.
console.crlinfo.crlSize=Size of downloaded CRL: {0}
console.crlinfo.distPointNotSupported=Distribution Points extension is not supported in given certificate.
console.crlinfo.foundCrlUri=Found CRL URL in distribution point: {0}
console.crlinfo.loadCrl=Downloading CRL from {0}
console.crlinfo.noUrlInDistPoint=No HTTP(s) URL found in distribution point.
console.crlinfo.retrieveCrlUrl=Reading CRL distribution points from certificate {0}
console.exception=Problem occured
console.fileNotFilled.error=Input or output PDF path is missing!
console.filesAreEqual.error=Input and output PDF paths are equal. Please fill the different paths.
console.finished.error=Finished: Creating of signature failed.
console.finished.ok=Finished: Signature created.
console.getAliases=Getting key alias
console.getCertChain=Getting certificate chain
console.getKeystoreType=Getting keystore type instance: {0}
console.getOCSPURL=Reading OCSP URL from certificate chain.
console.getPrivateKey=Loading private key…
console.inFileNotFound.error=The input PDF was not found or is not readable.
console.keys=Key aliases in the (JKS) keystore:
console.keystores=Available (JKS) keystore types:
console.loadKeystore=Loading keystore: {0}
console.memoryError=\r\nJava is out of memory. Try to allow more memory to your JVM.\r\nAdd parameter -Xmx<size> to your Java call.\r\ne.g. $java -Xmx512m … sets maximum Java heap size to 512MB.\r\n
console.noOCSPURL=OCSP server URL not found in certificate. The value entered in JSignPDF settings will be used.
console.pdfEncError.cantUseCertificate=Unable to use certificate encryption of the PDF. The encryption using public key from the certificate "{0}" is not supported by the running Java. 
console.pdfEncError.wrongCertificateFile=Unable to use certificate encryption of the PDF. The certificate file "{0}" either can't be loaded or it doesn't contain a X509 certificate.
console.processing=Processing (it may take a while)…
console.readingCRLs=Reading CRLs
console.readingOCSP=Getting OCSP data from URL: {0}
console.renderModeFallback=The Render mode of visible signature is set to "Image and description" but no image was provided. The mode "Description only" will be used.
console.serverNotTrusted=Certificate of the server is not trusted. You can use the InstallCert tool to add the server's certificate into a trusted certificates store\u0009.
console.setAcro6Layers=Use only layers recommend by Acrobat 6: {0}
console.setCertificationLevel=Setting certification level
console.setContact=Setting contact: {0}
console.setEncryption=Setting encryption
console.setImage=Setting background image
console.setImageScale=Setting background image scale
console.setL2Text=Setting Layer 2 text (description)
console.setL4Text=Setting Layer 4 text (status)
console.setSignerName=Setting signer name: {0}
console.setLocation=Setting location: {0}
console.setReason=Setting reason: {0}
console.setRender=Setting Render mode
console.setSignatureGraphic=Setting image
console.setVisibleSignature=Creating visible signature
console.settingTsaHashAlg=Setting TSA hash algorithm: {0}
console.settingTsaPolicy=Setting TSA policy OID: {0}
console.skippingSigning=File validation failed, check your PDF paths. Skipping signing proccess.
console.starting=Starting JSignPDF
console.unsupportedEncryptionType=Unsupported encryption type.
console.updateVersion=Updating PDF version info 1.{0} -> 1.{1}
console.updateVersionNotPossibleInAppendMode=Choosen configuration requires PDF version update, but it's not possible in the "append" signature mode.
console.usedKeyAlias=Used key alias: {0}
console.validatingFiles=Checking input and output PDF paths.
default.l2text.date=Date:
default.l2text.location=Location:
default.l2text.reason=Reason:
default.l2text.signedBy=Digitally signed by
error.keystoreNull=The keystore was not loaded. Check if the keystore type, path and password are valid.
error.sslHandshakeException=SSL connection failed — the certificate of the server is probably not known. You can use InstallCert Tool to import the certificate to Java Keystore.
error.vs.pageNotANumber=The page number has to whole number.
error.vs.previewFailed=Ooops. Preview failed.
file.notReadable=JSignPDF can not read the {0} file. Check if it exists and the user has read-access.
filechooser.overwrite.question=Overwrite the existing "{0}" file?
filechooser.save.warning=Save warning
filefilter.jks=(JKS) keystore files (.jks)
filefilter.pdf=PDF files (.pdf)
filefilter.pkcs12=PKCS#12 files (.pfx, .p12)
gui.advancedView.checkbox=A&dvanced view
gui.alias.label=Key &alias
gui.appendSignature.checkbox=Append si&gnature to the existing ones
gui.browse.button=Browse…
gui.certLevel.label=&Certification level
gui.certificateNotForEncryption.error=The file {0} either doesn't contain a X509 certificate or the encryption is not supported for the certificate.
gui.check.error.title=Check failed
gui.contact.label=Co&ntact (optional)
gui.encryptionCertFile.label=Certificate file for encryption
gui.fileNotExists.error={0} doesn't exist or it is not readable.
gui.filesEqual.error=Input and Output PDF files are equal.
gui.hashAlgorithm.label=&Hash algorithm
gui.inPdfFile.label=&Input PDF file
gui.info.close.button=Close
gui.info.title=JSignPDF Output Console
gui.keyPassword.label=Key pass&word
gui.keystoreFile.label=&Keystore file
gui.keystorePassword.label=Keystore &password
gui.keystoreType.label=Keystore &type
gui.loadAliases.button=Load ke&ys
gui.location.label=&Location (optional)
gui.outPdfFile.label=&Output PDF file (optional)
gui.pdfEncryption.label=PDF Encryption
gui.pdfOwnerPwd.label=Ow&ner password
gui.pdfUserPwd.label=&User password
gui.preview.title=Preview/Select
gui.reason.label=&Reason (optional)
gui.rights.assembly.checkbox=Assembly
gui.rights.button=Rights
gui.rights.copy.checkbox=Copy
gui.rights.fillIn.checkbox=Fill In
gui.rights.modifyAnnotations.checkbox=Modify Annotations
gui.rights.modifyContents.checkbox=Modify Contents
gui.rights.printing.label=Printing
gui.rights.rights.label=Rights
gui.rights.screenReaders.checkbox=Screen Readers
gui.rights.title=Rights
gui.signIt.button=&Sign It
gui.storePasswords.checkbox=Re&member passwords
gui.title=JSignPDF (version {0})
gui.tsa.authn.label=TSA Authentication
gui.tsa.certFile.label=Path for (PKCS12) keyfile
gui.tsa.certFilePwd.label=Key password
gui.tsa.crlEnabled.checkbox=Turn on CRL
gui.tsa.enabled.checkbox=Use timestamp server
gui.tsa.hashAlg.label=TSA hash algorithm
gui.tsa.ocspEnabled.checkbox=Turn on OCSP
gui.tsa.ocspServerUrl.label=Default OCSP server URL
gui.tsa.policy.label=TSA Policy (OID)
gui.tsa.proxy.panel=Proxy settings
gui.tsa.proxyHost.label=Proxy host/port
gui.tsa.proxyType.label=Type
gui.tsa.pwd.label=TSA password
gui.tsa.title=TSA and &certificate revocation
gui.tsa.url.label=TSA URL
gui.tsa.user.label=TSA user
gui.tsaOcsp.button=TSA/OCSP/CRL
gui.valueNotFilled.error={0} has to be filled.
gui.visibleSignature.checkbox=Visible signature
gui.visibleSignatureSettings.button=Settings
gui.vs.acro6layers.checkbox=Acrobat 6 layer mode
gui.vs.bgImgPath.label=Background image
gui.vs.bgImgScale.label=Background image scale
gui.vs.bgImgScale.tooltip=Insert positive value to multiply image size with the value.\r\nInsert zero value to fill whole background with it (stretch).\r\nInsert negative value to best fit resize.
gui.vs.browse.button=Browse…
gui.vs.close.button=Close
gui.vs.default.checkbox=Default
gui.vs.imgPath.label=Image
gui.vs.l2Text.label=Signature text
gui.vs.l2TextFontSize.label=Signature font-size
gui.vs.l4Text.label=Status text
gui.vs.llx.label=Lower-left x
gui.vs.llx.tooltip=Value on x-axis for position of a lower left corner of signature for placing it on a page.
gui.vs.lly.label=Lower-left y
gui.vs.lly.tooltip=Value on y-axis for position of a lower left corner of signature for placing it on a page.
gui.vs.page.label=Page
gui.vs.page.tooltip=The page the signature is displayed on. The first page has number 1.
gui.vs.position.label=Position
gui.vs.preview.button=Preview and select
gui.vs.renderMode.label=Display
gui.vs.settings.label=Settings
gui.vs.title=Visible signature settings
gui.vs.urx.label=Upper-right x
gui.vs.urx.tooltip=Value on x-axis for position of an upper-right corner of signature for placing it on a page.
gui.vs.ury.label=Upper-right y
gui.vs.ury.tooltip=Value on y-axis for position of an upper-right corner of signature for placing it on a page.
hlp.append=Add signature to existing ones. By default are existing signatures replaced by the new one.
hlp.bgPath=Background-image path for visible signatures
hlp.bgScale=Background image scale for visible signatures. Insert positive value to multiply image size with the value. Insert zero value to fill whole background with it (stretch). Insert negative value to best fit resize.
hlp.certLevel=Level of certification. The default value is NOT_CERTIFIED. Available values are {0}.
hlp.contact=The signer's contact details (a signature field)
hlp.crl=Turn on CRL certificate validation
hlp.disableAcro6Layers=Turns off the Acrobat 6 layer mode i.e. all signature layers will be created. Acrobat 6.0 and higher recommends only layer n2 and n4 be present.
hlp.disableAnnot=Deny modify annotations in encrypted documents
hlp.disableAssembly=Deny assembly in encrypted documents
hlp.disableContent=Deny modify content in encrypted documents
hlp.disableCopy=Deny copy in encrypted documents
hlp.disableFill=Deny fill encrypted documents
hlp.disableScrRead=Deny screen readers in encrypted documents
hlp.encCert=Path to the certificate file, which is used to encrypt output PDF in case of -encryption CERTIFICATE
hlp.encrypted=This property is deprecated, use -encryption PASSWORD instead!
hlp.encryption=Encryption mode for the output PDF default value is NONE. Possible values are {0}. Use togethter with -upwd and -opwd in case of PASSWORD mode, and -ec in case of CERTIFICATE
hlp.footer.examples=Examples:\r\n---------\r\n$ java -jar JSignPDF.jar -kst WINDOWS-MY mydocument.pdf\r\n-> creates copy of mydocument.pdf with name mydocument_signed.pdf, which is digitally signed with the first certificate found in default windows certificate store\r\n------------\r\n$ java -jar JSignPDF.jar -kst PKCS12 -ksf my_certificate.pfx -ksp myPrivateKeystorePassword -ka cert23 -pe PASSWORD -opwd xxx123 -upwd 123xxx -pr DISALLOW_PRINTING mydocument.pdf\r\n-> creates signed and encrypted file mydocument_signed.pdf, printing of the new file is not allowed. For signature is used key with alias cert23 from the file my_certificate.pfx\r\n------------\r\n$ java -jar JSignPDF.jar -lkt\r\n-> lists keystore types\r\n------------\r\n$ java -jar JSignPDF.jar -kst PKCS12 -ksf my_certificate.pfx -ksp myVeryPrivatePassword -lk -q\r\n-> list names (aliases) of keys stored in my_certificate.pfx file using the password for keystore. Quiet mode is enabled so no debug info is printed.
hlp.footer.exitCodes=Program exit codes:\r\n-------------------\r\n0 program finished without error\r\n1 command line is in a wrong format\r\n  2 no operation requested - e.g. no file for signing provided\r\n  3 signing of some - but not all - files failed\r\n  4 signing of all files failed
hlp.hashAlgorithm=Hash algorithm used for signature. The default value is SHA-1. Available values are {0}.
hlp.header=JSignPDF is designed to digitally sign PDF documents. If you start the program without any commandline argument, the GUI is started, otherwise you can use it in commandline batch mode.
hlp.help=Prints this help screen
hlp.imgPath=Image path for visible signature
hlp.keyAlias=Name (alias) of the key, which should be used for signing the document. If not given, the first key in the keystore is used. (List the key aliases using -lk)
hlp.keyIndex=Zero-based index of the key, which should be used for signing the document. If neither this option nor alias is given, the first key (index=0) in the keystore is used. (List the key aliases using -lk). This option has lower priority than alias.
hlp.keyPwd=Password for the key in the keystore. In most cases you don't need to set this option — only keystore is protected by a password, but just in case :)
hlp.ksFile=Sets (JKS) keystore file — as the value use the path on which is file with private key(s) located (.p12, .pfx, .jks, …). Some keystores haven't keys stored in a file (e.g. Windows keystore — WINDOWS-MY), then don't use this option.
hlp.ksPwd=Password to (JKS) keystore
hlp.ksType=Sets (JKS) keystore type (you can list possible values for this option -lkt argument)
hlp.l2Text=Signature text. You can also use placeholders for signature properties (${signer}, ${certificate}, ${timestamp}, ${location}, ${reason}, ${contact})
hlp.l2TextFontSize=Font size for visible signature text. The default value is {0}
hlp.l4Text=Status text
hlp.listKeys=Lists keys in choosen keystore
hlp.listKsTypes=Lists keystore types, which can be used as values -kst option
hlp.loadProperties=Loads properties from a default file (created by GUI program).
hlp.loadPropertiesFile=Loads properties from the given file. The file can be create by copying the default property file .JSignPDF created by the GUI in the user home directory.
hlp.location=Location of a signatue (e.g. Washington DC). Empty by default.
hlp.ocsp=enable OCSP certificate validation
hlp.ocspServerUrl=Default OCSP server URL, which will be used in case the signing certificate doesn't contain this info.
hlp.outPath=Folder to store the signed documents in. The default value is the current folder.
hlp.outPrefix=Prefix for signed file. The default value is empty prefix.
hlp.outSuffix=Suffix for signed filename. The default value is "_signed". (e.g. sign process on file mydocument.pdf will create new file mydocument_signed.pdf)
hlp.ownerpwd=Owner password for encrypted documents (used when -e option is given)
hlp.page=Page with visible signature. The default value is 1 (first page). If the provided page number is out of bounds, the last page is used.
hlp.posLLX=Lower-left corner postion on x-axis of a visible signature
hlp.posLLY=Lower-left corner postion on y-axis of a visible signature
hlp.posURX=Upper right corner postion on x-axis of a visible signature
hlp.posURY=Upper-right corner postion on y-axis of a visible signature
hlp.printRight=Printing rights. Used for encrypted documents. Default value is ALLOW_PRINTING. Available values are {0}
hlp.proxyHost=Hostname or IP address of proxy server
hlp.proxyPort=Port of proxy server, default value is {0}
hlp.proxyType=Proxy type for internet connections. The default value is {0}. Possible values are {1}
hlp.quiet=Quiet mode — without info messages during process
hlp.signerName=Signer name. Defaults to the common name (CN) of the chosen certificate.
hlp.reason=Reason of signature. Empty by default.
hlp.renderMode=Render mode for visible signatures. The default value is DESCRIPTION_ONLY. Possible values are {0}
hlp.tsaAuthn=Authentication method used when contacting TSA server. The default value is NONE. Possible values are {0}
hlp.tsaCertFile=Path to keystore file, which contains private key used to authentication against TSA server, when CERTIFICATE authentication method is used.
hlp.tsaCertFileType=Keystore type for TSA CERTIFICATE authentication — the default is PKCS12
hlp.tsaCertPasswd=Password used to open PKCS#12 file (see -tscf option) with a private key
hlp.tsaHashAlg=Hash algorithm used in query to time-stamping server (TSA); the default is {0}
hlp.tsaPolicy=TSA policy OID which should be set to timestamp request.
hlp.tsaPwd=TSA user password. Use this switch if you use timestamping (-ts) and TSA server requires authentication.
hlp.tsaUrl=Address of timestamping server (TSA). If you use this argument, the timestamp will be included to signature. (For testing purposes you can try following URL http://dse200.ncipher.com/TSS/HttpTspServer)
hlp.tsaUser=TSA username. Use this switch if you use timestamping (-ts) and TSA server requires authentication.
hlp.userpwd=User password for encrypted documents (used when -e option is given)
hlp.version=Shows the program version
hlp.visible=Visible signatures
extcsp.nocert=No certificate received from keystore, error: {0}
extcsp.nohost=Cannot connect to signing server — unknown host {0}: {1}
extcsp.iohost=Cannot connect to signing server — connection error: {0}
extcsp.certfactory=Failed to create an instance of CertificateFactory
extcsp.nosignature=Signing error. No signature received. No details.
extcsp.nosignatureerr=Signing error. The keystore returned an error: {0}
extcsp.unknownhashalg=The provided \"{0}\" fingerprint/hash algorithm is not supported
pdfEncryption.certificate=Certificate
pdfEncryption.notEncrypted=Not encrypted
pdfEncryption.password=Passwords
render.descriptionOnly=Description only
render.graphicAndDescription=Image and description
render.signameAndDescription=Signature name and description
rights.allowDegradedPrinting=Allow degraded
rights.allowPrinting=Allow
rights.disallowPrinting=Disallow
serverAuthn.certificate=Client certificate
serverAuthn.none=Without authentication
serverAuthn.password=Username / Password
ssl.keymanager.init=Initializing key-manager from keystore file {0}.
